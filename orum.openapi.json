{
  "openapi": "3.0.4",
  "info": {
    "title": "Auth API",
    "description": "Orum Auth API.",
    "version": "v2022-09-21"
  },
  "servers": [
    {
      "url": "https://api-sandbox.orum.io"
    }
  ],
  "paths": {
    "/oauth/token": {
      "post": {
        "tags": [
          "How to authenticate"
        ],
        "summary": "Request an access token",
        "description": "<a href=\"https://orum.io/contact/\" target=\"_blank\">Contact Orum</a> for access to an Orum Portal account, where you can set up your login credentials.<br /><br />Use this <code>/oauth/token</code> endpoint to exchange API credentials created in the Portal (client_id and client_secret) for an <code>access_token</code>.<br /><br /> To authenticate to all protected Orum endpoints, pass the <code>access_token</code> in the Authorization header <code>Bearer ${token}</code>.<br />The auth token is valid for one hour.",
        "operationId": "post-oauth-token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthTokenBody"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OauthTokenBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "forbidden request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "internal server error."
          },
          "503": {
            "description": "service unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deliver/persons": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Create a person",
        "description": "Create a person object to represent a human customer.",
        "operationId": "post-person",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get all persons",
        "description": "Get all persons objects.",
        "operationId": "get-persons",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          },
          {
            "name": "customer_reference_id",
            "in": "query",
            "description": "Filter by customer reference id",
            "schema": {
              "$ref": "#/components/schemas/CustomerReferenceId"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by customer statuses (multiple allowed)",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersonStatus"
              }
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_person_status"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "Filter results created at or after this time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_start_time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter results created before this time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_end_time"
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "The first name to filter persons by (case-insensitive, exact match).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "The last name to filter persons by (case-insensitive, exact match).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_number",
            "in": "query",
            "description": "Filter by account number",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UsBankAccountNumber"
                }
              ]
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_account_number"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter results by the person id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-orum-error-invalid": {
              "message": "Orum ID is invalid. Pass in a valid uuid",
              "code": "invalid_orum_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonsResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Persons"
        ],
        "summary": "Update a person by customer reference id",
        "description": "Update a person object using its reference id.",
        "operationId": "put-person-using-reference-id",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPersonRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutPersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/persons/{id}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get a person by id",
        "description": "Get a person object.",
        "operationId": "get-person",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the person resource you are fetching.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_person"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Persons"
        ],
        "summary": "Update a person by id",
        "description": "Update a person object by its id.",
        "operationId": "put-person",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the person resource you are updating.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_person"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPersonRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutPersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Persons"
        ],
        "summary": "Partial update a person by id",
        "description": "Update individual fields on person object.",
        "operationId": "patch-person",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the resource for the person resource you are updating.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_person"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPersonRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/businesses": {
      "post": {
        "tags": [
          "Businesses"
        ],
        "summary": "Create a business",
        "description": "Create a business object to represent a business customer.",
        "operationId": "post-business",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Businesses"
        ],
        "summary": "Get all businesses",
        "description": "Get all business objects.",
        "operationId": "get-businesses",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          },
          {
            "name": "customer_reference_id",
            "in": "query",
            "description": "Filter by customer reference id",
            "schema": {
              "$ref": "#/components/schemas/CustomerReferenceId"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by customer statuses (multiple allowed)",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BusinessStatus"
              }
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_business_status"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "Filter results created at or after this time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_start_time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter results created before this time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_end_time"
            }
          },
          {
            "name": "legal_name",
            "in": "query",
            "description": "Filter by legal name",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LegalName"
                }
              ]
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_legal_name"
            }
          },
          {
            "name": "account_number",
            "in": "query",
            "description": "Filter by account number",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UsBankAccountNumber"
                }
              ]
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_account_number"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter results by the business id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-orum-error-invalid": {
              "message": "Orum ID is invalid. Pass in a valid uuid",
              "code": "invalid_orum_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessesResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Businesses"
        ],
        "summary": "Update a business by reference id",
        "description": "Update a business object using reference id.",
        "operationId": "put-business-using-reference-id",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutBusinessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutBusinessResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/businesses/{id}": {
      "get": {
        "tags": [
          "Businesses"
        ],
        "summary": "Get a business by id",
        "description": "Get a business object.",
        "operationId": "get-business",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the business you are fetching.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_business"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Businesses"
        ],
        "summary": "Update a business by id",
        "description": "Update a business object by id.",
        "operationId": "put-business",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the business you are updating.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_business"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutBusinessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutBusinessResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Businesses"
        ],
        "summary": "Partial update a business by id",
        "description": "Update individual fields on a business object.",
        "operationId": "patch-business",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the business you are updating.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_business"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchBusinessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/external/accounts": {
      "post": {
        "tags": [
          "External Accounts"
        ],
        "summary": "Create an external account",
        "description": "Create an external account object.",
        "operationId": "post-external-account",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "External Accounts"
        ],
        "summary": "Get all external accounts",
        "description": "Get all external account objects.",
        "operationId": "get-external-accounts",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          },
          {
            "name": "account_reference_id",
            "in": "query",
            "description": "Filter by account reference id",
            "schema": {
              "$ref": "#/components/schemas/AccountReferenceId"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_query_account_reference_id"
            }
          },
          {
            "name": "customer_reference_id",
            "in": "query",
            "description": "Filter by customer reference id",
            "allowEmptyValue": true,
            "schema": {
              "$ref": "#/components/schemas/CustomerReferenceId"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_query_customer_reference_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountsResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "External Accounts"
        ],
        "summary": "Update an external account by reference id",
        "description": "Update an external account object using its reference id.",
        "operationId": "put-external-account-using-reference-id",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutExternalAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/external/accounts/{id}": {
      "get": {
        "tags": [
          "External Accounts"
        ],
        "summary": "Get an external account by id",
        "description": "Get an external account object.",
        "operationId": "get-external-account",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the resource for the external account you are fetching.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_external_account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "External Accounts"
        ],
        "summary": "Update an external account by id",
        "description": "Update an external account object.",
        "operationId": "put-external-account",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the resource for the external account you are updating.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_external_account"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutExternalAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "External Accounts"
        ],
        "summary": "Partial update an external account by id",
        "description": "Update individual fields on an external account object.",
        "operationId": "patch-external-account",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the resource for the external account you are updating.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_external_account"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchExternalAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/persons/{id}/external/accounts": {
      "get": {
        "tags": [
          "External Accounts"
        ],
        "summary": "Get all external accounts for a specific person",
        "description": "Get all external account objects, associated with a specific person",
        "operationId": "get-person-external-accounts",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the person you are requesting accounts for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_person"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountsResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/businesses/{id}/external/accounts": {
      "get": {
        "tags": [
          "External Accounts"
        ],
        "summary": "Get all external accounts for a specific business",
        "description": "Get all external account objects, associated with a specific business",
        "operationId": "get-business-external-accounts",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the business you are requesting accounts for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_business"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountsResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/cards": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Create a card",
        "description": "Create a card object.",
        "operationId": "post-card",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Get all cards",
        "description": "Get all cards by filter.",
        "operationId": "get-cards",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          },
          {
            "name": "customer_reference_id",
            "in": "query",
            "description": "Filter by customer reference id",
            "schema": {
              "$ref": "#/components/schemas/CustomerReferenceId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardsResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/cards/{id}": {
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Get a card by id",
        "description": "Get a card object by id.",
        "operationId": "get-card",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the resource for the card you are fetching.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_card"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/transfers": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Create a transfer",
        "description": "Initiate a transfer between a source party and destination party.",
        "operationId": "post-transfer",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Get all transfers",
        "description": "Get all transfer objects.",
        "operationId": "get-transfers",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          },
          {
            "name": "transfer_reference_id",
            "in": "query",
            "description": "Filter results by transfer reference id",
            "schema": {
              "$ref": "#/components/schemas/TransferReferenceId"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter results by transfer status",
            "schema": {
              "$ref": "#/components/schemas/TransferStatus"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_status"
            }
          },
          {
            "name": "transfer_group_id",
            "in": "query",
            "description": "Filter results by transfer group id",
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransfersResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/transfers/{id}": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Get a transfer by id",
        "description": "Get a transfer object.",
        "operationId": "get-transfer",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the transfer you are fetching.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_transfer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Transfers"
        ],
        "summary": "Update transfer metadata by id",
        "description": "Update the metadata on a transfer.",
        "operationId": "patch-transfer-metadata",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the transfer you are fetching.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_transfer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferPatchMetadataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/transfers/{id}/cancel": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Cancel a transfer by id",
        "description": "Initiates a transfer cancellation request if the transfer is eligible.",
        "operationId": "post-transfer-cancel",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the transfer you are canceling.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_transfer"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "202 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferCancelResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/eligibility": {
      "post": {
        "tags": [
          "Eligibility"
        ],
        "summary": "Check if a routing number is eligible for RTP or FedNow",
        "description": "Returns routing number eligibility",
        "operationId": "post-eligibility",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EligibilityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Eligibility"
        ],
        "summary": "A list of RTP and FedNow Eligible Routing Numbers",
        "description": "Returns all routing numbers that are eligible for RTP and FedNow",
        "operationId": "get-eligibility",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEligibilityResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/transfer-groups": {
      "post": {
        "tags": [
          "Transfer Groups"
        ],
        "summary": "Create a Transfer Group",
        "description": "Create a Transfer Group object.",
        "operationId": "post-transfer-group",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransferGroupRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Transfer Groups"
        ],
        "summary": "Get all Transfer Groups",
        "description": "Get all Transfer Group objects, sorted by most recently created transfer groups",
        "operationId": "get-transfer-groups",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          },
          {
            "name": "transfer_group_reference_id",
            "in": "query",
            "description": "Filter results by reference id.",
            "schema": {
              "type": "string"
            },
            "x-orum-error-missing": {
              "known-error": "invalid_transfer_group_reference_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/transfer-groups/{id}": {
      "get": {
        "tags": [
          "Transfer Groups"
        ],
        "summary": "Get a Transfer Group",
        "description": "Get a Transfer Group object by ID",
        "operationId": "get-transfer-group",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Transfer Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier for the transfer group in UUID format.",
              "format": "uuid"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id_transfer_group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/balance": {
      "get": {
        "tags": [
          "Balance"
        ],
        "summary": "Get balance",
        "description": "Get balance object.",
        "operationId": "get-balance",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested enterprise account balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deliver/reports/balances": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a balance statement summary report",
        "description": "Get a balance statement summary report for the requested start and end date.",
        "operationId": "get-reports-balances",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StartTime"
                }
              ]
            },
            "x-orum-error-missing": {
              "message": "start_time is required",
              "code": "missing_start_time"
            },
            "x-orum-error-invalid": {
              "message": "start_time must be a valid timestamp",
              "code": "invalid_start_time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EndTime"
                }
              ]
            },
            "x-orum-error-missing": {
              "message": "end_time is required",
              "code": "missing_end_time"
            },
            "x-orum-error-invalid": {
              "message": "end_time must be a valid timestamp",
              "code": "invalid_end_time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:reports"
            ]
          }
        ]
      }
    },
    "/verify/accounts": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Post verify accounts",
        "description": "Request account verification.",
        "operationId": "post-verify-accounts",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "Get all verify accounts",
        "description": "Get all verify accounts, sorted by most recently created.",
        "operationId": "get-verify-accounts",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyAccountsResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/verify/accounts/{id}": {
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "Get a verify account",
        "description": "Get a single verify account.",
        "operationId": "get-verify-account",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the account you are fetching.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/verify/accounts/{id}/control": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Verify account control",
        "description": "Verify control for a single verify account.",
        "operationId": "post-verify-account-control",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the account you are verifying.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAccountControlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/verify/accounts/{id}/debits": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Verify account debit status",
        "description": "Verify debit status for a single verify account.",
        "operationId": "post-verify-account-debit",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Orum generated unique id for the account you are verifying.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumId"
            },
            "x-orum-error-invalid": {
              "known-error": "unknown_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/webhooks/configurations": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Create Webhook Configuration",
        "description": "Configure a webhook URL for specific event types.",
        "operationId": "create-webhook-configuration",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWebhookConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List webhook configurations",
        "description": "List all webhook configurations",
        "operationId": "list-webhook-configurations",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index for paginated results",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "x-orum-error-invalid": {
              "known-error": "index"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Max number of results to return",
            "schema": {
              "maximum": 500,
              "minimum": 0,
              "type": "integer",
              "default": 100
            },
            "x-orum-error-invalid": {
              "known-error": "size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWebhookConfigurationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/webhooks/invoke": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Invoke webhook",
        "description": "Invoke a webhook",
        "operationId": "invoke-webhook",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvokeWebhookConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Invoked."
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/webhooks/configurations/{id}": {
      "put": {
        "tags": [
          "Webhook"
        ],
        "summary": "Update Webhook Configuration",
        "description": "Update a webhook URL for specific event types.",
        "operationId": "update-webhook-configuration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWebhookConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete webhook configuration",
        "description": "Delete webhook configuration by id",
        "operationId": "delete-webhook-configuration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted."
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/webhooks/secret": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Initialize keypair",
        "description": "Initialize secure webhook keypair",
        "operationId": "initialize-keypair",
        "parameters": [
          {
            "name": "Orum-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrumVersion"
            },
            "x-orum-error-invalid": {
              "known-error": "version_invalid"
            },
            "x-orum-error-missing": {
              "known-error": "version_missing"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitializeKeypairResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "required": [
          "error_code",
          "message"
        ],
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "OauthTokenBody": {
        "required": [
          "client_id",
          "client_secret"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "ID returned when generating API Credentials.",
            "x-orum-error-missing": {
              "message": "client_id is required",
              "code": "missing_client_id"
            },
            "x-orum-error-invalid": {
              "message": "client_id must be a string",
              "code": "invalid_client_id",
              "status": "400"
            }
          },
          "client_secret": {
            "type": "string",
            "description": "Secret returned when generating API Credentials.",
            "x-orum-error-missing": {
              "message": "client_secret is required",
              "code": "missing_client_secret"
            },
            "x-orum-error-invalid": {
              "message": "client_secret must be a string",
              "code": "invalid_client_secret",
              "status": "400"
            }
          }
        }
      },
      "OauthTokenResponse": {
        "title": "OauthTokenResponse",
        "required": [
          "access_token",
          "scope",
          "token_type",
          "expires_in"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Short-lived auth (access) token that you will pass in the Authorization header of all Deliver calls."
          },
          "token_type": {
            "type": "string",
            "description": "The type of token returned. This will always be \"Bearer\"."
          },
          "expires_in": {
            "type": "number",
            "description": "The time in seconds until the token expires."
          }
        }
      },
      "Metadata": {
        "type": "object",
        "description": "Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information."
      },
      "MetadataPut": {
        "type": "object",
        "description": "Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information."
      },
      "PersonRequest": {
        "title": "PersonRequest",
        "required": [
          "customer_reference_id",
          "first_name",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "customer_reference_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerReferenceId"
              }
            ],
            "x-orum-error-missing": {
              "known-error": "missing_customer_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_customer_reference_id"
            }
          },
          "first_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_first_name"
            },
            "x-orum-error-missing": {
              "known-error": "missing_first_name"
            }
          },
          "middle_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MiddleName"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "known-error": "invalid_middle_name"
            }
          },
          "last_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_last_name"
            },
            "x-orum-error-missing": {
              "known-error": "missing_last_name"
            }
          },
          "date_of_birth": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Date of birth is invalid. Valid format is YYYY-MM-DD.",
              "code": "invalid_date_of_birth"
            }
          },
          "social_security_number": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialSecurityNumber"
              }
            ],
            "x-orum-error-invalid": {
              "message": "Social Security Number is invalid.",
              "code": "invalid_social_security_number"
            }
          },
          "addresses": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonPostalAddressRequest"
            },
            "description": "Address information for the person. Note: This field is required for payouts, deposits, or account-to-account transfers.",
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Addresses array is invalid. Pass an array containing an address object.",
              "code": "invalid_addresses"
            }
          },
          "contacts": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactRequestPerson"
            },
            "description": "Optional list of contact information for the person. If object is present, either phone and/or email contact types are accepted.  A maximum of three persons or businesses can have the same phone number.",
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Contacts array is invalid. Pass an array of contact information containing phone and/or email contact types.",
              "code": "invalid_contacts"
            }
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Metadata must be a valid JSON object.",
              "code": "invalid_metadata"
            }
          }
        }
      },
      "PutPersonRequest": {
        "title": "PutPersonRequest",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonRequest"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetadataPut"
                  }
                ],
                "nullable": true,
                "x-orum-error-invalid": {
                  "message": "Metadata must be a valid JSON object.",
                  "code": "invalid_metadata"
                }
              }
            }
          }
        ]
      },
      "PatchPersonRequest": {
        "title": "PatchPersonRequest",
        "type": "object",
        "properties": {
          "first_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "known-error": "invalid_first_name"
            }
          },
          "middle_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MiddleName"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "known-error": "invalid_middle_name"
            }
          },
          "last_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "known-error": "invalid_last_name"
            }
          },
          "date_of_birth": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Date of birth is invalid. Valid format is YYYY-MM-DD.",
              "code": "invalid_date_of_birth"
            }
          },
          "social_security_number": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialSecurityNumber"
              }
            ],
            "nullable": true
          },
          "addresses": {
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonPatchPostalAddressRequest"
            },
            "description": "Address information for the person. \"type\" is required if you are updating other address fields. Note: This field is required for payouts, deposits, or account-to-account transfers.",
            "nullable": true
          },
          "contacts": {
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchContactRequestPerson"
            },
            "description": "Optional list of contact information for the person. If object is present, either phone and/or email contact types are accepted.  A maximum of three persons or businesses can have the same phone number.",
            "nullable": true
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Metadata must be a valid JSON object.",
              "code": "invalid_metadata"
            }
          }
        }
      },
      "PersonResponseBase": {
        "required": [
          "id",
          "customer_reference_id",
          "first_name",
          "last_name",
          "status",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "customer_reference_id": {
            "$ref": "#/components/schemas/CustomerReferenceId"
          },
          "first_name": {
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of birth in YYYY-MM-DD format. Note: This field is required for payouts, deposits, or account-to-account transfers. Age must be less than 100 years and greater than 18 years to be verified."
          },
          "status": {
            "$ref": "#/components/schemas/PersonStatus"
          },
          "addresses": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostalAddressResponse"
            },
            "description": "Address information for the person. Note: This field is required for payouts, deposits, or account-to-account transfers."
          },
          "contacts": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactResponsePerson"
            },
            "description": "List of contact information for the person."
          },
          "status_reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonReasonCode"
            },
            "description": "Array that explains why the person failed verification."
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          "closed_at": {
            "$ref": "#/components/schemas/ClosedAt"
          },
          "metadata": {
            "type": "object",
            "description": "Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information."
          }
        }
      },
      "PutPersonResponseBase": {
        "title": "PutPersonResponseBase",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonResponseBase"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/MetadataPut"
              }
            }
          }
        ]
      },
      "PersonResponse": {
        "title": "PersonResponse",
        "required": [
          "person"
        ],
        "type": "object",
        "properties": {
          "person": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PersonResponseBase"
              }
            ]
          }
        }
      },
      "PutPersonResponse": {
        "title": "PutPersonResponse",
        "required": [
          "person"
        ],
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PutPersonResponseBase"
          }
        }
      },
      "PersonsResponse": {
        "title": "PersonsResponse",
        "required": [
          "persons"
        ],
        "type": "object",
        "properties": {
          "persons": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PersonResponseBase"
                }
              ]
            },
            "description": "List of person objects."
          }
        }
      },
      "PersonStatus": {
        "title": "PersonStatus",
        "enum": [
          "created",
          "verified",
          "rejected",
          "restricted",
          "closed"
        ],
        "type": "string",
        "description": "Status of person in Orum system."
      },
      "PersonPostalAddressRequest": {
        "title": "PersonPostalAddressRequest",
        "required": [
          "type",
          "address1",
          "city",
          "state",
          "country",
          "zip5"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressTypePerson"
              }
            ],
            "x-orum-error-invalid": {
              "message": "Address type is invalid. Valid type for person is \"home\".",
              "code": "invalid_addresses_type"
            },
            "x-orum-error-missing": {
              "message": "Address type is required. Pass type \"home\" for a person resource.",
              "code": "missing_addresses_type"
            }
          },
          "address1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address1"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_address1"
            },
            "x-orum-error-missing": {
              "message": "Address1 is required.",
              "code": "missing_address1"
            }
          },
          "address2": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address2"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_address2"
            }
          },
          "city": {
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_city"
            },
            "x-orum-error-missing": {
              "known-error": "missing_city"
            }
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_state"
            },
            "x-orum-error-missing": {
              "known-error": "missing_state"
            }
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_country"
            },
            "x-orum-error-missing": {
              "known-error": "missing_country"
            }
          },
          "zip5": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Zip5"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_zip5"
            },
            "x-orum-error-missing": {
              "known-error": "missing_zip5"
            }
          }
        },
        "description": "Address."
      },
      "PersonPatchPostalAddressRequest": {
        "title": "PersonPatchPostalAddressRequest",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressTypePerson"
              }
            ],
            "x-orum-error-invalid": {
              "message": "Address type is invalid. Valid type for person is \"home\".",
              "code": "invalid_addresses_type"
            }
          },
          "address1": {
            "$ref": "#/components/schemas/Address1"
          },
          "address2": {
            "$ref": "#/components/schemas/Address2"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_state"
            }
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_country"
            }
          },
          "zip5": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Zip5"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_zip5"
            }
          }
        },
        "description": "Address."
      },
      "BusinessPatchPostalAddressRequest": {
        "title": "BusinessPatchPostalAddressRequest",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressTypeBusiness"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_address_type"
            },
            "x-orum-error-missing": {
              "known-error": "missing_address_type"
            }
          },
          "address1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address1"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_address1"
            }
          },
          "address2": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address2"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_address2"
            }
          },
          "city": {
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_city"
            }
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_state"
            }
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_country"
            }
          },
          "zip5": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Zip5"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_zip5"
            }
          }
        },
        "description": "Address."
      },
      "BusinessPostalAddressRequest": {
        "title": "BusinessPostalAddressRequest",
        "required": [
          "type",
          "address1",
          "city",
          "state",
          "country",
          "zip5"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressTypeBusiness"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_address_type"
            },
            "x-orum-error-missing": {
              "known-error": "missing_address_type"
            }
          },
          "address1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address1"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_address1"
            },
            "x-orum-error-missing": {
              "message": "Address1 is required.",
              "code": "missing_address1"
            }
          },
          "address2": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address2"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_address2"
            }
          },
          "city": {
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_city"
            },
            "x-orum-error-missing": {
              "known-error": "missing_city"
            }
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_state"
            },
            "x-orum-error-missing": {
              "known-error": "missing_state"
            }
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_country"
            },
            "x-orum-error-missing": {
              "known-error": "missing_country"
            }
          },
          "zip5": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Zip5"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_zip5"
            },
            "x-orum-error-missing": {
              "known-error": "missing_zip5"
            }
          }
        },
        "description": "Address."
      },
      "ContactRequestPerson": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactPostBasePerson"
          },
          {
            "required": [
              "value"
            ],
            "type": "object"
          }
        ]
      },
      "PatchContactRequestPerson": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactBasePerson"
          }
        ]
      },
      "ContactPostBasePerson": {
        "title": "ContactBasePerson",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactTypePerson"
              }
            ],
            "x-orum-error-invalid": {
              "message": "Contact type is invalid. Valid contact type for person is \"email\" or \"phone\".",
              "code": "invalid_contacts_type"
            },
            "x-orum-error-missing": {
              "message": "Type field is required. Valid types are \"email\", or \"phone\".",
              "code": "missing_contacts_type"
            }
          },
          "value": {
            "maxLength": 255,
            "type": "string",
            "description": "Email or phone number.",
            "x-orum-error-invalid": {
              "message": "Value for contact type is invalid. Pass a string value.",
              "code": "invalid_contacts_value"
            },
            "x-orum-error-missing": {
              "message": "Value for contact type is missing. For type \"phone\", pass a valid 10-digit US phone number. For type \"email\", pass a valid email. Example: hello@orum.io",
              "code": "missing_contacts_value"
            }
          }
        },
        "description": "Contact information."
      },
      "ContactBasePerson": {
        "title": "ContactBasePerson",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactTypePerson"
              }
            ],
            "x-orum-error-invalid": {
              "message": "Contact type is invalid. Valid contact type for person is \"email\" or \"phone\".",
              "code": "invalid_contacts_type"
            },
            "x-orum-error-missing": {
              "message": "Type field is required. Valid types are \"email\", or \"phone\".",
              "code": "missing_contacts_type"
            }
          },
          "value": {
            "maxLength": 255,
            "type": "string",
            "description": "Email or phone number.",
            "x-orum-error-invalid": {
              "message": "Value for contact type is invalid. Pass a string value.",
              "code": "invalid_contacts_value"
            }
          }
        },
        "description": "Contact information."
      },
      "ContactRequestBusiness": {
        "title": "ContactRequestBusiness",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactTypeBusiness"
              }
            ],
            "x-orum-error-invalid": {
              "message": "Type field is invalid. Valid type is \"phone\", \"website\" or \"email\".",
              "code": "invalid_contacts_type"
            },
            "x-orum-error-missing": {
              "message": "Type field is required. Valid types are \"phone\", \"website\" or \"email\".",
              "code": "missing_contacts_type"
            }
          },
          "value": {
            "maxLength": 255,
            "type": "string",
            "description": "Email, phone number or website.",
            "x-orum-error-invalid": {
              "message": "Value for contact type is invalid. Pass a string value.",
              "code": "invalid_contacts_value"
            },
            "x-orum-error-missing": {
              "message": "Value for contact type is missing. For type \"phone\", pass a valid 10-digit US phone number. For type \"website\", pass a website with a valid top-level domain. For type \"email\", pass a valid email. Example: hello@orum.io",
              "code": "missing_contacts_value"
            }
          }
        },
        "description": "Contact information."
      },
      "PatchContactRequestBusiness": {
        "title": "PatchContactRequestBusiness",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ContactTypeBusiness"
          },
          "value": {
            "maxLength": 255,
            "type": "string",
            "description": "Email, phone number or website."
          }
        },
        "description": "Contact information."
      },
      "ContactResponsePerson": {
        "title": "ContactResponse",
        "required": [
          "id",
          "type",
          "value",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "type": {
            "$ref": "#/components/schemas/ContactTypePerson"
          },
          "value": {
            "type": "string",
            "description": "Email or phone number."
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        },
        "description": "Contact information."
      },
      "ContactResponseBusiness": {
        "title": "ContactResponse",
        "required": [
          "id",
          "type",
          "value",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "type": {
            "$ref": "#/components/schemas/ContactTypeBusiness"
          },
          "value": {
            "type": "string",
            "description": "A standard set of values that indicate the contact type."
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        },
        "description": "Contact information."
      },
      "PostalAddressResponse": {
        "title": "PostalAddressResponse",
        "required": [
          "id",
          "type",
          "address1",
          "city",
          "state",
          "country",
          "zip5",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "type": {
            "$ref": "#/components/schemas/AddressType"
          },
          "address1": {
            "$ref": "#/components/schemas/Address1"
          },
          "address2": {
            "$ref": "#/components/schemas/Address2"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "zip5": {
            "$ref": "#/components/schemas/Zip5"
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        },
        "description": "Address."
      },
      "ExternalAccountRequest": {
        "title": "ExternalAccountRequest",
        "required": [
          "account_reference_id",
          "customer_reference_id",
          "customer_resource_type",
          "account_type",
          "account_number",
          "routing_number",
          "account_holder_name"
        ],
        "type": "object",
        "properties": {
          "account_reference_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountReferenceId"
              }
            ],
            "x-orum-error-missing": {
              "message": "Account reference id is required. Pass a unique account reference id.",
              "code": "missing_account_reference_id"
            },
            "x-orum-error-invalid": {
              "message": "Account reference id is invalid. Pass a string value.",
              "code": "invalid_account_reference_id"
            }
          },
          "customer_reference_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAccountCustomerReferenceId"
              }
            ],
            "x-orum-error-missing": {
              "message": "Customer reference id for the external account's associated person or business is required.",
              "code": "missing_customer_reference_id"
            },
            "x-orum-error-invalid": {
              "message": "Customer reference id is invalid. Pass a string value.",
              "code": "invalid_customer_reference_id"
            }
          },
          "customer_resource_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndCustomerResourceType"
              }
            ],
            "x-orum-error-missing": {
              "message": "Customer resource type is required. Valid customer resource type is \"person\", \"business\" or \"enterprise\".",
              "code": "missing_customer_resource_type"
            },
            "x-orum-error-invalid": {
              "message": "Customer resource type is invalid. Valid customer resource type is \"person\", \"business\" or \"enterprise\".",
              "code": "invalid_customer_resource_type"
            }
          },
          "account_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountType"
              }
            ],
            "x-orum-error-missing": {
              "message": "Account type is required. Valid account type is \"checking\" or \"savings\".",
              "code": "missing_account_type"
            },
            "x-orum-error-invalid": {
              "message": "Account type is invalid. Valid account type is \"checking\" or \"savings\".",
              "code": "invalid_account_type"
            }
          },
          "account_number": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UsBankAccountNumber"
              }
            ],
            "x-orum-error-missing": {
              "message": "Account number is required. Pass an account number with 17 digits or fewer.",
              "code": "missing_account_number"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_account_number"
            }
          },
          "routing_number": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AbaRoutingNumber"
              }
            ],
            "x-orum-error-missing": {
              "message": "Routing number is required. Pass a valid 9-digit routing number.",
              "code": "missing_routing_number"
            },
            "x-orum-error-invalid": {
              "message": "Routing number is invalid. Pass a valid 9-digit routing number.",
              "code": "invalid_routing_number"
            }
          },
          "account_holder_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountHolderName"
              }
            ],
            "x-orum-error-missing": {
              "message": "Account holder name is required.",
              "code": "missing_account_holder_name"
            },
            "x-orum-error-invalid": {
              "message": "Account holder name is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods and diacritics.",
              "code": "invalid_account_holder_name"
            }
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Metadata must be a valid JSON object.",
              "code": "invalid_metadata"
            }
          }
        }
      },
      "PutExternalAccountRequest": {
        "title": "PutExternalAccountRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExternalAccountRequest"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetadataPut"
                  }
                ],
                "nullable": true,
                "x-orum-error-invalid": {
                  "message": "Metadata must be a valid JSON object.",
                  "code": "invalid_metadata"
                }
              }
            }
          }
        ]
      },
      "PatchExternalAccountRequest": {
        "title": "PatchExternalAccountRequest",
        "type": "object",
        "properties": {
          "account_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountType"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Account type is invalid. Valid account type is \"checking\" or \"savings\".",
              "code": "invalid_account_type"
            }
          },
          "account_number": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UsBankAccountNumber"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "known-error": "invalid_account_number"
            }
          },
          "routing_number": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AbaRoutingNumber"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Routing number is invalid. Pass a valid 9-digit routing number.",
              "code": "invalid_routing_number"
            }
          },
          "account_holder_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountHolderName"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Account holder name is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods and diacritics.",
              "code": "invalid_account_holder_name"
            }
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Metadata must be a valid JSON object.",
              "code": "invalid_metadata"
            }
          }
        }
      },
      "ExternalAccountResponseBase": {
        "title": "ExternalAccountResponseBase",
        "required": [
          "id",
          "account_reference_id",
          "customer_reference_id",
          "customer_resource_type",
          "account_type",
          "account_number",
          "routing_number",
          "account_holder_name",
          "status",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "account_reference_id": {
            "$ref": "#/components/schemas/AccountReferenceId"
          },
          "customer_reference_id": {
            "$ref": "#/components/schemas/ExternalAccountCustomerReferenceId"
          },
          "customer_resource_type": {
            "$ref": "#/components/schemas/EndCustomerResourceType"
          },
          "account_type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "account_number": {
            "$ref": "#/components/schemas/UsBankAccountNumber"
          },
          "routing_number": {
            "$ref": "#/components/schemas/AbaRoutingNumber"
          },
          "account_holder_name": {
            "type": "string",
            "description": "Name of account holder."
          },
          "status": {
            "$ref": "#/components/schemas/ExternalAccountStatus"
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "description": "A single object of External Account."
      },
      "ExternalAccountResponse": {
        "title": "ExternalAccountResponse",
        "required": [
          "external_account"
        ],
        "type": "object",
        "properties": {
          "external_account": {
            "$ref": "#/components/schemas/ExternalAccountResponseBase"
          }
        }
      },
      "ExternalAccountsResponse": {
        "title": "ExternalAccountsResponse",
        "required": [
          "external_accounts"
        ],
        "type": "object",
        "properties": {
          "external_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalAccountResponseBase"
            },
            "description": "List of External Accounts."
          }
        }
      },
      "BusinessRequest": {
        "title": "BusinessRequest",
        "required": [
          "customer_reference_id",
          "legal_name"
        ],
        "type": "object",
        "properties": {
          "customer_reference_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerReferenceId"
              }
            ],
            "x-orum-error-missing": {
              "known-error": "missing_customer_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_customer_reference_id"
            }
          },
          "legal_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LegalName"
              }
            ],
            "x-orum-error-missing": {
              "message": "Legal name is required. Accepted values are alphanumeric characters, spaces, hyphens, apostrophes, periods and diacritics.",
              "code": "missing_legal_name"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_legal_name"
            }
          },
          "business_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessName"
              }
            ],
            "nullable": true
          },
          "entity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessEntityType"
              }
            ],
            "nullable": true
          },
          "tax_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxId"
              }
            ],
            "nullable": true
          },
          "tax_id_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxIdType"
              }
            ],
            "nullable": true
          },
          "account_holder_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountHolderName"
              }
            ],
            "nullable": true
          },
          "incorporation_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IncorporationDate"
              }
            ],
            "nullable": true
          },
          "addresses": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessPostalAddressRequest"
            },
            "description": "Incorporated address information for the business. Note: This field is required for payouts, deposits, or account-to-account transfers. Orum requires a physical address for all registered businesses; aligned with standards mandated by FinCEN and the FDIC. A physical address is a tangible building address, such as a home, office, or office suite. A PO Box is a mailing address, but not a physical address.",
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Addresses array is invalid. Pass an array containing an address object.",
              "code": "invalid_addresses"
            }
          },
          "contacts": {
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactRequestBusiness"
            },
            "description": "List of contact information for the business. 'email', 'phone', or 'website' are required. A maximum of three persons or businesses can have the same phone number.",
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Contacts array is invalid. Pass an array of contact information containing phone, website, and/or email contact types.",
              "code": "invalid_contacts"
            }
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Metadata must be a valid JSON object.",
              "code": "invalid_metadata"
            }
          }
        }
      },
      "PutBusinessRequest": {
        "title": "PutBusinessBase",
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRequest"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetadataPut"
                  }
                ],
                "nullable": true,
                "x-orum-error-invalid": {
                  "message": "Metadata must be a valid JSON object.",
                  "code": "invalid_metadata"
                }
              }
            }
          }
        ]
      },
      "PatchBusinessRequest": {
        "title": "PatchBusinessRequest",
        "type": "object",
        "properties": {
          "legal_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LegalName"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "known-error": "invalid_legal_name"
            }
          },
          "business_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessName"
              }
            ],
            "nullable": true
          },
          "entity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessEntityType"
              }
            ],
            "nullable": true
          },
          "tax_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxId"
              }
            ],
            "nullable": true
          },
          "tax_id_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxIdType"
              }
            ],
            "nullable": true
          },
          "account_holder_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountHolderName"
              }
            ],
            "nullable": true
          },
          "incorporation_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IncorporationDate"
              }
            ],
            "nullable": true
          },
          "addresses": {
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessPatchPostalAddressRequest"
            },
            "description": "Incorporated address information for the business. \"type\" is required if you are updating other address fields. Note: This field is required for payouts, deposits, or account-to-account transfers. Orum requires a physical address for all registered businesses; aligned with standards mandated by FinCEN and the FDIC. A physical address is a tangible building address, such as a home, office, or office suite. A PO Box is a mailing address, but not a physical address.",
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Addresses array is invalid. Pass an array containing an address object.",
              "code": "invalid_addresses"
            }
          },
          "contacts": {
            "maxItems": 3,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchContactRequestBusiness"
            },
            "description": "List of contact information for the business. 'email', 'phone', or 'website' are required. A maximum of three persons or businesses can have the same phone number.",
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Contacts array is invalid. Pass an array of contact information containing phone, website, and/or email contact types.",
              "code": "invalid_contacts"
            }
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Metadata must be a valid JSON object.",
              "code": "invalid_metadata"
            }
          }
        }
      },
      "BusinessResponseBase": {
        "title": "BusinessResponseBase",
        "required": [
          "id",
          "customer_reference_id",
          "legal_name",
          "status",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "customer_reference_id": {
            "$ref": "#/components/schemas/CustomerReferenceId"
          },
          "legal_name": {
            "type": "string",
            "description": "The legal name of the business as it appears on official registration forms. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, hashes, colons, forward slashes, and diacritics."
          },
          "business_name": {
            "type": "string",
            "description": "A trade name or pseudonym used by the business that is not its officially registered company name. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, hashes, colons, forward slashes, and diacritics."
          },
          "entity_type": {
            "type": "string",
            "description": "Describes the type of business entity."
          },
          "tax_id": {
            "type": "string",
            "description": "9-digit corporate tax id of business - can be Taxpayer Identification Number (TIN) or Employer Identification Number (EIN). Note: This field is required for payouts, deposits, or account-to-account transfers."
          },
          "tax_id_type": {
            "type": "string",
            "description": "The type of tax ID number associated with the business. Note: This field is required for payouts, deposits, or account-to-account transfers."
          },
          "account_holder_name": {
            "type": "string",
            "description": "Name of the owner or primary person associated with the business."
          },
          "incorporation_date": {
            "type": "string",
            "description": "Date the business was incorporated, in YYYY-MM-DD format."
          },
          "status": {
            "$ref": "#/components/schemas/BusinessStatus"
          },
          "addresses": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostalAddressResponse"
            },
            "description": "Incorporated address information for the business. Note: This field is required for payouts, deposits, or account-to-account transfers. Orum requires a physical address for all registered businesses; aligned with standards mandated by FinCEN and the FDIC. A physical address is a tangible building address, such as a home, office, or office suite. A PO Box is a mailing address, but not a physical address."
          },
          "contacts": {
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactResponseBusiness"
            },
            "description": "List of contact information for the business."
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          "closed_at": {
            "$ref": "#/components/schemas/ClosedAt"
          },
          "metadata": {
            "type": "object",
            "description": "Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information."
          }
        }
      },
      "PutBusinessResponseBase": {
        "title": "PutBusinessResponseBase",
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessResponseBase"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/MetadataPut"
              }
            }
          }
        ]
      },
      "BusinessResponse": {
        "title": "BusinessResponse",
        "required": [
          "business"
        ],
        "type": "object",
        "properties": {
          "business": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessResponseBase"
              }
            ]
          }
        }
      },
      "PutBusinessResponse": {
        "title": "PutBusinessResponse",
        "required": [
          "business"
        ],
        "type": "object",
        "properties": {
          "business": {
            "$ref": "#/components/schemas/PutBusinessResponseBase"
          }
        }
      },
      "BusinessesResponse": {
        "title": "BusinessesResponse",
        "required": [
          "businesses"
        ],
        "type": "object",
        "properties": {
          "businesses": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BusinessResponseBase"
                }
              ]
            },
            "description": "List of businesses."
          }
        }
      },
      "BusinessStatus": {
        "title": "BusinessStatus",
        "enum": [
          "created",
          "verified",
          "rejected",
          "restricted",
          "closed"
        ],
        "type": "string",
        "description": "Status of Business."
      },
      "AccountReferenceId": {
        "title": "AccountReferenceId",
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "description": "Unique reference id for the external account. Generated by you."
      },
      "CustomerReferenceId": {
        "title": "CustomerReferenceId",
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "description": "Unique reference id for the customer (business or person) resource. Generated by you."
      },
      "ExternalAccountCustomerReferenceId": {
        "title": "ExternalAccountCustomerReferenceId",
        "maxLength": 255,
        "type": "string",
        "description": "Unique customer_reference_id that you passed when creating the associated customer (business or person) resource."
      },
      "FirstName": {
        "title": "FirstName",
        "maxLength": 255,
        "minLength": 1,
        "pattern": "^[ ’!\"#$%&'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]+$",
        "type": "string",
        "description": "Accepts latin characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics."
      },
      "MiddleName": {
        "title": "MiddleName",
        "maxLength": 255,
        "pattern": "^[ ’!\"#$%&'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*$",
        "type": "string",
        "description": "Accepts latin characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics."
      },
      "LastName": {
        "title": "LastName",
        "maxLength": 255,
        "minLength": 1,
        "pattern": "^[ ’!\"#$%&'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]+$",
        "type": "string",
        "description": "Accepts latin characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics."
      },
      "DateOfBirth": {
        "title": "DateOfBirth",
        "pattern": "^((19|20)\\d\\d)-(0[1-9]|1[0-2])-(([01])[0-9]|2[0-9]|3[0-1])$",
        "type": "string",
        "description": "Date of birth in YYYY-MM-DD format. Note: This field is required for payouts, deposits, or account-to-account transfers. Age must be less than 100 years and greater than 18 years to be verified."
      },
      "SocialSecurityNumber": {
        "title": "SocialSecurityNumber",
        "type": "string",
        "description": "Social Security Number (SSN) or Individual Taxpayer Identification Number (ITIN) in XXX-XX-XXXX format. An example dummy value is 123-45-6789. Note: This field is required for payouts, deposits, or account-to-account transfers.",
        "nullable": true
      },
      "ContactTypePerson": {
        "title": "ContactTypePerson",
        "enum": [
          "email",
          "phone"
        ],
        "type": "string",
        "description": "Type of contact information associated with a person - 'email' or 'phone'."
      },
      "ContactTypeBusiness": {
        "title": "ContactTypeBusiness",
        "enum": [
          "email",
          "phone",
          "website"
        ],
        "type": "string",
        "description": "Type of contact information associated with a business - 'email', 'phone' or 'website'."
      },
      "AddressType": {
        "title": "AddressType",
        "enum": [
          "home",
          "legal"
        ],
        "type": "string",
        "description": "Type of address."
      },
      "AddressTypePerson": {
        "title": "AddressTypePerson",
        "enum": [
          "home"
        ],
        "type": "string",
        "description": "Type of address. Always 'home' for person object."
      },
      "AddressTypeBusiness": {
        "title": "AddressTypeBusiness",
        "enum": [
          "legal"
        ],
        "type": "string",
        "description": "Type of address. Always 'legal' for business object."
      },
      "Address1": {
        "title": "Address1",
        "maxLength": 255,
        "type": "string",
        "description": "Address line 1.",
        "x-orum-error-invalid": {
          "message": "Address1 is invalid. Ensure it is a string with a maximum length of 255 characters.",
          "code": "invalid_address1"
        }
      },
      "Address2": {
        "title": "Address2",
        "maxLength": 255,
        "type": "string",
        "description": "Address line 2.",
        "x-orum-error-invalid": {
          "message": "Address2 is invalid. Ensure it is a string with a maximum length of 255 characters.",
          "code": "invalid_address2"
        }
      },
      "City": {
        "title": "City",
        "maxLength": 255,
        "type": "string",
        "description": "City."
      },
      "State": {
        "title": "State",
        "pattern": "^[A-Z]{2}$",
        "type": "string",
        "description": "Uppercase two-character state code of the address."
      },
      "Country": {
        "title": "Country",
        "enum": [
          "US"
        ],
        "type": "string",
        "description": "2-character ISO country code."
      },
      "Zip5": {
        "title": "Zip5",
        "pattern": "^\\d{5}$",
        "type": "string",
        "description": "5-digit ZIP Code. Numeric values (0-9) only."
      },
      "UsBankAccountNumber": {
        "title": "UsBankAccountNumber",
        "pattern": "^(?:\\d-{0,1}){0,16}\\d$",
        "type": "string",
        "description": "Account number for US bank account. 17 digits maximum."
      },
      "AbaRoutingNumber": {
        "title": "AbaRoutingNumber",
        "pattern": "^\\d{9}$",
        "type": "string",
        "description": "9-digit American Bankers Association (ABA) routing number."
      },
      "EndCustomerResourceType": {
        "enum": [
          "business",
          "person",
          "enterprise"
        ],
        "type": "string",
        "description": "Type of customer resource - business, person, or enterprise."
      },
      "AccountType": {
        "enum": [
          "checking",
          "savings"
        ],
        "type": "string",
        "description": "Type of bank account - checking or savings."
      },
      "ExternalAccountStatus": {
        "enum": [
          "created",
          "verified",
          "rejected",
          "restricted",
          "closed"
        ],
        "type": "string",
        "description": "Status of the external account."
      },
      "BusinessEntityType": {
        "title": "BusinessEntityType",
        "enum": [
          "sole_proprietorship",
          "partnership",
          "limited_liability_partnership",
          "limited_liability_company",
          "c_corporation",
          "s_corporation",
          "b_corporation",
          "nonprofit_corporation"
        ],
        "type": "string",
        "description": "Describes the type of business entity.",
        "nullable": true,
        "x-orum-error-invalid": {
          "message": "Entity type is invalid. Valid entity type is \"sole_proprietorship\", \"partnership\", \"limited_liability_partnership\", \"limited_liability_company\", \"c_corporation\", \"s_corporation\", \"b_corporation\", or \"nonprofit_corporation\".",
          "code": "invalid_entity_type"
        }
      },
      "LegalName": {
        "title": "LegalName",
        "maxLength": 255,
        "pattern": "^[^\\s][ ’!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]+$",
        "type": "string",
        "description": "The legal name of the business as it appears on official registration forms. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, hashes, colons, forward slashes, and diacritics."
      },
      "BusinessName": {
        "title": "BusinessName",
        "maxLength": 255,
        "pattern": "^([ ’!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*|)$",
        "type": "string",
        "description": "A trade name or pseudonym used by the business that is not its officially registered company name. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, hashes, colons, forward slashes, and diacritics.",
        "x-orum-error-invalid": {
          "message": "Business name is invalid. Accepted values are alphanumeric characters, spaces, hyphens, apostrophes, periods and diacritics.",
          "code": "invalid_business_name"
        }
      },
      "TaxId": {
        "title": "TaxId",
        "pattern": "^\\d{9}$",
        "type": "string",
        "description": "9-digit corporate tax id of business - can be Taxpayer Identification Number (TIN) or Employer Identification Number (EIN). Note: This field is required for payouts, deposits, or account-to-account transfers.",
        "x-orum-error-invalid": {
          "message": "Invalid tax id. Expecting 9-digit numeric id.",
          "code": "invalid_tax_id"
        }
      },
      "TaxIdType": {
        "title": "TaxIdType",
        "enum": [
          "tin",
          "ein"
        ],
        "type": "string",
        "description": "The type of tax ID number associated with the business. Note: This field is required for payouts, deposits, or account-to-account transfers.",
        "x-orum-error-invalid": {
          "message": "Tax id type is invalid. Valid tax id type is \"tin\" or \"ein\".",
          "code": "invalid_tax_id_type"
        }
      },
      "IncorporationDate": {
        "title": "IncorporationDate",
        "pattern": "^((16|17|18|19|20)\\d\\d)-(0[1-9]|1[0-2])-(([01])[0-9]|2[0-9]|3[0-1])$",
        "type": "string",
        "description": "Date the business was incorporated, in YYYY-MM-DD format.",
        "x-orum-error-invalid": {
          "message": "Incorporation date is invalid. Expecting format YYYY-MM-DD.",
          "code": "invalid_incorporation_date"
        }
      },
      "CreatedAt": {
        "type": "string",
        "description": "Timestamp when the resource was created.",
        "format": "date-time"
      },
      "UpdatedAt": {
        "type": "string",
        "description": "Timestamp when the resource was last updated.",
        "format": "date-time"
      },
      "ClosedAt": {
        "type": "string",
        "description": "Timestamp when the status of the resource was set to \"closed\".",
        "format": "date-time"
      },
      "OrumVersion": {
        "enum": [
          "v2022-09-21"
        ],
        "type": "string",
        "description": "Version of Deliver API. Use v2022-09-21."
      },
      "OrumId": {
        "type": "string",
        "description": "Orum generated unique id for the resource.",
        "format": "uuid"
      },
      "PersonReasonCode": {
        "required": [
          "reason_code",
          "reason_code_message"
        ],
        "type": "object",
        "properties": {
          "reason_code": {
            "type": "string",
            "description": "A word-based code that describes the verification failure.",
            "example": "invalid_address"
          },
          "reason_code_message": {
            "type": "string",
            "description": "A human-readable description of the reason code.",
            "example": "Address submitted is a non-supported address type"
          }
        }
      },
      "AccountHolderName": {
        "maxLength": 255,
        "pattern": "^([ ’!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*|)$",
        "type": "string",
        "description": "Name of account holder. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.",
        "x-orum-error-invalid": {
          "message": "Account holder name is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods and diacritics.",
          "code": "invalid_account_holder_name"
        }
      },
      "CardAccountHolderNamePerson": {
        "required": [
          "first_name",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_first_name"
            },
            "x-orum-error-missing": {
              "known-error": "missing_first_name"
            }
          },
          "middle_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MiddleName"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "known-error": "invalid_middle_name"
            },
            "x-omitempty": true
          },
          "last_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_last_name"
            },
            "x-orum-error-missing": {
              "known-error": "missing_last_name"
            }
          },
          "suffix": {
            "maxLength": 255,
            "pattern": "^([ ’!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*)$",
            "type": "string",
            "description": "Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.",
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "suffix is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods, and diacritics.",
              "code": "invalid_suffix"
            },
            "x-omitempty": true
          }
        },
        "description": "Name of account holder.",
        "x-orum-error-invalid": {
          "message": "Account holder name is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods and diacritics.",
          "code": "invalid_account_holder_name"
        }
      },
      "CardAccountHolderNameBusiness": {
        "required": [
          "company_name"
        ],
        "type": "object",
        "properties": {
          "company_name": {
            "maxLength": 255,
            "pattern": "^[^\\s][ ’!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]+$",
            "type": "string",
            "description": "Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.",
            "x-orum-error-invalid": {
              "message": "Company name is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods, and diacritics.",
              "code": "invalid_company_name"
            },
            "x-orum-error-missing": {
              "message": "Company name is required. Accepted values are letters, spaces, hyphens, apostrophes, periods, and diacritics.",
              "code": "missing_company_name"
            }
          }
        },
        "description": "Business name of account holder. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics."
      },
      "CardZipOnlyAddress": {
        "required": [
          "zip5"
        ],
        "type": "object",
        "properties": {
          "zip5": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Zip5"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_zip5"
            }
          }
        },
        "description": "Zip code of card holder"
      },
      "CardFullAddress": {
        "required": [
          "address1",
          "city",
          "state",
          "country",
          "zip5"
        ],
        "type": "object",
        "properties": {
          "address1": {
            "$ref": "#/components/schemas/Address1"
          },
          "address2": {
            "$ref": "#/components/schemas/Address2"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_state"
            }
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_country"
            }
          },
          "zip5": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Zip5"
              }
            ],
            "x-orum-error-invalid": {
              "known-error": "invalid_zip5"
            }
          }
        },
        "description": "Full address of card holder"
      },
      "CardLastFourDigits": {
        "pattern": "^[xX]+\\d{4}$",
        "type": "string",
        "description": "The last four digits of the card number supplied by the customer."
      },
      "CardExpirationMonth": {
        "maximum": 12,
        "minimum": 1,
        "type": "integer",
        "description": "The month in which the card expires."
      },
      "CardExpirationYear": {
        "minimum": 2024,
        "type": "integer",
        "description": "The year in which the card expires."
      },
      "CardRequest": {
        "title": "CardRequest",
        "required": [
          "account_reference_id",
          "customer_reference_id",
          "customer_resource_type",
          "account_holder_name",
          "address",
          "number",
          "expiration_month",
          "expiration_year"
        ],
        "type": "object",
        "properties": {
          "account_reference_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountReferenceId"
              }
            ],
            "x-orum-error-missing": {
              "message": "Account reference id is required. Pass a unique account reference id.",
              "code": "missing_account_reference_id"
            },
            "x-orum-error-invalid": {
              "message": "Account reference id is invalid. Pass a string value.",
              "code": "invalid_account_reference_id"
            }
          },
          "customer_reference_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardCustomerReferenceId"
              }
            ],
            "x-orum-error-missing": {
              "message": "Customer reference id for the card's associated person or business is required.",
              "code": "missing_customer_reference_id"
            },
            "x-orum-error-invalid": {
              "message": "Customer reference id is invalid. Pass a string value.",
              "code": "invalid_customer_reference_id"
            }
          },
          "customer_resource_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndCustomerResourceType"
              }
            ],
            "x-orum-error-missing": {
              "message": "Customer resource type is required. Valid customer resource type is \"person\", \"business\" or \"enterprise\".",
              "code": "missing_customer_resource_type"
            },
            "x-orum-error-invalid": {
              "message": "Customer resource type is invalid. Valid customer resource type is \"person\", \"business\" or \"enterprise\".",
              "code": "invalid_customer_resource_type"
            }
          },
          "account_holder_name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardAccountHolderNamePerson"
              },
              {
                "$ref": "#/components/schemas/CardAccountHolderNameBusiness"
              }
            ],
            "x-orum-error-missing": {
              "message": "Account holder name is required.",
              "code": "missing_account_holder_name"
            },
            "x-orum-error-invalid": {
              "message": "Account holder name is invalid.",
              "code": "invalid_account_holder_name"
            }
          },
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CardZipOnlyAddress"
              },
              {
                "$ref": "#/components/schemas/CardFullAddress"
              }
            ],
            "x-orum-error-missing": {
              "message": "Address is required.",
              "code": "missing_address"
            },
            "x-orum-error-invalid": {
              "message": "Address is invalid.",
              "code": "invalid_address"
            }
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Metadata must be a valid JSON object.",
              "code": "invalid_metadata"
            }
          },
          "number": {
            "maxLength": 19,
            "minLength": 8,
            "type": "string",
            "description": "The card's number",
            "x-orum-error-missing": {
              "message": "Card number is required.",
              "code": "missing_number"
            },
            "x-orum-error-invalid": {
              "message": "Card number is invalid.",
              "code": "invalid_number"
            }
          },
          "expiration_month": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardExpirationMonth"
              }
            ],
            "x-orum-error-missing": {
              "message": "Card's expiration month is required.",
              "code": "missing_expiration_month"
            },
            "x-orum-error-invalid": {
              "message": "Card's expiration month is invalid.",
              "code": "invalid_expiration_month"
            }
          },
          "expiration_year": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardExpirationYear"
              }
            ],
            "x-orum-error-missing": {
              "message": "Card's expiration year is required.",
              "code": "missing_expiration_year"
            },
            "x-orum-error-invalid": {
              "message": "Card's expiration year is invalid.",
              "code": "invalid_expiration_year"
            }
          }
        }
      },
      "CardResponseBase": {
        "required": [
          "id",
          "account_reference_id",
          "customer_reference_id",
          "customer_resource_type",
          "account_holder_name",
          "status",
          "address",
          "last4",
          "expiration_month",
          "expiration_year",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "account_reference_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountReferenceId"
              }
            ]
          },
          "customer_reference_id": {
            "$ref": "#/components/schemas/CustomerReferenceId"
          },
          "customer_resource_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndCustomerResourceType"
              }
            ]
          },
          "account_holder_name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardAccountHolderNamePerson"
              },
              {
                "$ref": "#/components/schemas/CardAccountHolderNameBusiness"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/CardStatus"
          },
          "address": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardZipOnlyAddress"
              },
              {
                "$ref": "#/components/schemas/CardFullAddress"
              }
            ]
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          "metadata": {
            "type": "object",
            "description": "Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information."
          },
          "last4": {
            "$ref": "#/components/schemas/CardLastFourDigits"
          },
          "expiration_month": {
            "$ref": "#/components/schemas/CardExpirationMonth"
          },
          "expiration_year": {
            "$ref": "#/components/schemas/CardExpirationYear"
          }
        }
      },
      "CardsResponse": {
        "title": "CardsResponse",
        "required": [
          "cards"
        ],
        "type": "object",
        "properties": {
          "cards": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CardResponseBase"
                }
              ]
            },
            "description": "List of card objects."
          }
        }
      },
      "CardResponse": {
        "title": "CardResponse",
        "required": [
          "card"
        ],
        "type": "object",
        "properties": {
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardResponseBase"
              }
            ]
          }
        }
      },
      "CardStatus": {
        "title": "CardStatus",
        "enum": [
          "created",
          "verified",
          "closed"
        ],
        "type": "string",
        "description": "Status of card in Orum system."
      },
      "CardCustomerReferenceId": {
        "title": "CardCustomerReferenceId",
        "maxLength": 255,
        "type": "string",
        "description": "Unique customer_reference_id that you passed when creating the associated customer (business or person) resource."
      },
      "TransferRequest": {
        "title": "TransferRequest",
        "required": [
          "transfer_reference_id",
          "amount",
          "currency",
          "speed"
        ],
        "type": "object",
        "properties": {
          "transfer_reference_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferReferenceId"
              }
            ],
            "x-orum-error-missing": {
              "known-error": "missing_transfer_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_transfer_reference_id"
            }
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferAmount"
              }
            ],
            "x-orum-error-missing": {
              "known-error": "missing_amount"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_amount"
            }
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferCurrency"
              }
            ],
            "x-orum-error-missing": {
              "known-error": "missing_currency"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_currency"
            }
          },
          "speed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferSpeed"
              }
            ],
            "x-orum-error-missing": {
              "known-error": "missing_speed"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_speed"
            }
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceTransferParty"
              }
            ],
            "nullable": true
          },
          "destination": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DestinationTransferParty"
              }
            ],
            "nullable": true
          },
          "account_statement_descriptor": {
            "type": "string",
            "description": "Banks can display additional information to help the end user understand why they received funds. This information will appear on both the source and destination bank account statements. The field supports 10 alphanumeric characters for ACH and 140 for RTP.",
            "nullable": true,
            "x-orum-error-invalid": {
              "known-error": "invalid_account_statement_descriptor"
            }
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "message": "Metadata must be a valid JSON object.",
              "code": "invalid_metadata"
            }
          },
          "transfer_group_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrumId"
              }
            ],
            "nullable": true,
            "x-orum-error-invalid": {
              "known-error": "invalid_transfer_group_id"
            }
          }
        }
      },
      "TransferPatchMetadataRequest": {
        "title": "TransferPatchMetadata",
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "x-orum-error-missing": {
              "message": "Metadata is required",
              "code": "missing_metadata"
            },
            "x-orum-error-invalid": {
              "message": "Metadata must be a valid JSON object.",
              "code": "invalid_metadata"
            }
          }
        }
      },
      "TransferResponseBaseObject": {
        "title": "TransferResponseBaseObject",
        "required": [
          "id",
          "transfer_reference_id",
          "amount",
          "currency",
          "speed",
          "status",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "transfer_reference_id": {
            "$ref": "#/components/schemas/TransferReferenceId"
          },
          "amount": {
            "$ref": "#/components/schemas/TransferAmount"
          },
          "currency": {
            "$ref": "#/components/schemas/TransferCurrency"
          },
          "speed": {
            "$ref": "#/components/schemas/TransferSpeed"
          },
          "source": {
            "$ref": "#/components/schemas/SourceTransferPartyResponse"
          },
          "destination": {
            "$ref": "#/components/schemas/DestinationTransferPartyResponse"
          },
          "status": {
            "$ref": "#/components/schemas/TransferStatus"
          },
          "status_reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferStatusReason"
            },
            "description": "Array that explains why the transfer failed."
          },
          "account_statement_descriptor": {
            "type": "string",
            "description": "Banks can display additional information to help the end user understand why they received funds. This information will appear on both the source and destination bank account statements. The field supports 10 alphanumeric characters for ACH and 140 for RTP."
          },
          "estimated_funds_delivery_date": {
            "type": "string",
            "description": "Estimated date that funds will arrive in destination account. Time will always be midnight and should be ignored.",
            "format": "date-time"
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "transfer_group_id": {
            "$ref": "#/components/schemas/OrumId"
          }
        }
      },
      "TransferResponse": {
        "title": "TransferResponse",
        "required": [
          "transfer"
        ],
        "type": "object",
        "properties": {
          "transfer": {
            "$ref": "#/components/schemas/TransferResponseBaseObject"
          }
        }
      },
      "TransfersResponse": {
        "title": "TransfersResponse",
        "required": [
          "transfers"
        ],
        "type": "object",
        "properties": {
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferResponseBaseObject"
            },
            "description": "List of transfers."
          }
        }
      },
      "TransferCancelResponse": {
        "title": "TransferCancelResponse",
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "An explanation for the status of the transfer cancellation request."
          }
        }
      },
      "TransferReferenceId": {
        "title": "TransferReferenceId",
        "minLength": 1,
        "type": "string",
        "description": "Unique reference id for the transfer. Generated by you."
      },
      "PostEligibilityAbaRoutingNumber": {
        "title": "PostEligibilityAbaRoutingNumber",
        "pattern": "^\\d{9}$",
        "type": "string",
        "description": "9-digit American Bankers Association (ABA) routing number.",
        "x-orum-error-invalid": {
          "known-error": "invalid_routing_numbers"
        }
      },
      "TransferAmount": {
        "title": "TransferAmount",
        "minimum": 1,
        "type": "integer",
        "description": "Transfer amount in integral cents (example: 100 = $1). Must be greater than zero."
      },
      "TransferCurrency": {
        "title": "Currency",
        "enum": [
          "USD"
        ],
        "type": "string",
        "description": "Currency code in ISO 4217 format. Only USD is supported."
      },
      "TransferSpeed": {
        "title": "Speed",
        "enum": [
          "asap",
          "standard",
          "same_day",
          "wire"
        ],
        "type": "string",
        "description": "Speed of transfer."
      },
      "SourceTransferParty": {
        "title": "Source",
        "required": [
          "account_reference_id",
          "customer_reference_id"
        ],
        "type": "object",
        "properties": {
          "customer_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "Unique reference ID for the customer (person or business) associated with the external account being debited.",
            "x-orum-error-missing": {
              "known-error": "missing_source_customer_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_source_customer_reference_id"
            }
          },
          "account_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "Unique reference ID for the external account being debited.",
            "x-orum-error-missing": {
              "known-error": "missing_source_account_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_source_account_reference_id"
            }
          },
          "statement_display_name": {
            "type": "string",
            "description": "The name that will appear on the bank account statement of the account being debited. The field supports 16 alphanumeric characters for ACH, and 140 for RTP.",
            "nullable": true
          }
        },
        "description": "For use cases that require a Source, information about the transfer funding source, which will be debited."
      },
      "DestinationTransferParty": {
        "title": "Destination",
        "required": [
          "account_reference_id",
          "customer_reference_id"
        ],
        "type": "object",
        "properties": {
          "customer_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "Unique reference ID for the customer (person or business) associated with the external account being credited.",
            "x-orum-error-missing": {
              "known-error": "missing_destination_customer_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_destination_customer_reference_id"
            }
          },
          "account_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "Unique reference ID for the account being credited.",
            "x-orum-error-missing": {
              "known-error": "missing_destination_account_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_destination_account_reference_id"
            }
          },
          "statement_display_name": {
            "type": "string",
            "description": "The name that will appear on the bank account statement of the account being credited. The field supports 16 alphanumeric characters for ACH, and 140 for RTP.",
            "nullable": true
          }
        },
        "description": "Information about the transfer funds destination, which will be credited."
      },
      "SourceTransferPartyResponse": {
        "title": "Source",
        "required": [
          "account_reference_id",
          "customer_reference_id"
        ],
        "type": "object",
        "properties": {
          "customer_reference_id": {
            "type": "string",
            "description": "Unique reference ID for the customer (person or business) associated with the external account being debited."
          },
          "account_reference_id": {
            "type": "string",
            "description": "Unique reference ID for the external account being debited."
          },
          "statement_display_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartyStatementDisplayName"
              }
            ]
          }
        },
        "description": "For use cases that require a Source, information about the transfer funding source, which will be debited."
      },
      "DestinationTransferPartyResponse": {
        "title": "Destination",
        "required": [
          "account_reference_id",
          "customer_reference_id"
        ],
        "type": "object",
        "properties": {
          "customer_reference_id": {
            "type": "string",
            "description": "Unique reference ID for the customer (person or business) associated with the external account being credited."
          },
          "account_reference_id": {
            "type": "string",
            "description": "Unique reference ID for the account being credited."
          },
          "statement_display_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartyStatementDisplayName"
              }
            ]
          }
        },
        "description": "Information about the transfer funds destination, which will be credited."
      },
      "PartyStatementDisplayName": {
        "title": "PartyStatementDisplayName",
        "type": "string",
        "description": "The name that will appear on the bank account statement of the account being debited. The field supports 16 alphanumeric characters for ACH, and 140 for RTP."
      },
      "TransferStatus": {
        "title": "TransferStatus",
        "enum": [
          "completed",
          "created",
          "failed",
          "pending",
          "settled"
        ],
        "type": "string",
        "description": "Describes the current status of the transfer."
      },
      "TransferStatusReason": {
        "title": "Transfer Status Reason",
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/ReasonCodes"
          },
          "destination": {
            "$ref": "#/components/schemas/ReasonCodes"
          }
        },
        "description": "For failed transfers - details on why the transfer is in a failed state."
      },
      "ReasonCodes": {
        "title": "ReasonCode",
        "required": [
          "reason_code",
          "reason_code_message"
        ],
        "type": "object",
        "properties": {
          "reason_code": {
            "type": "string",
            "description": "A word-based code created by Orum to describe the reason for the failure. Orum reason codes are rail-agnostic.",
            "example": "insufficient_funds"
          },
          "reason_code_message": {
            "type": "string",
            "description": "A human-readable description of the reason code."
          },
          "network_reason_code": {
            "type": "string",
            "description": "The reason code sent by the network (ex R01)."
          },
          "network_reason_code_message": {
            "type": "string",
            "description": "The message sent by the network."
          },
          "network_reason_code_rail_type": {
            "type": "string",
            "description": "The payment rail used in the transfer. Either RTP or ACH."
          }
        }
      },
      "EligibilityRequest": {
        "title": "EligibilityRequest",
        "required": [
          "routing_numbers"
        ],
        "type": "object",
        "properties": {
          "routing_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostEligibilityAbaRoutingNumber"
            },
            "x-orum-error-missing": {
              "message": "Routing numbers is required",
              "code": "missing_routing_numbers"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_routing_numbers"
            }
          }
        }
      },
      "EligibilityResponse": {
        "title": "EligibilityResponse",
        "required": [
          "routing_numbers"
        ],
        "type": "object",
        "properties": {
          "routing_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EligibilityRoutingNumber"
            }
          }
        }
      },
      "EligibilityRoutingNumber": {
        "title": "EligibilityRoutingNumber",
        "required": [
          "routing_number",
          "eligible",
          "rtp",
          "fednow"
        ],
        "type": "object",
        "properties": {
          "routing_number": {
            "$ref": "#/components/schemas/AbaRoutingNumber"
          },
          "eligible": {
            "$ref": "#/components/schemas/Eligible"
          },
          "rtp": {
            "$ref": "#/components/schemas/RTPEligible"
          },
          "fednow": {
            "$ref": "#/components/schemas/FednowEligible"
          }
        }
      },
      "RtpAndFedNow": {
        "required": [
          "rtp",
          "fednow"
        ],
        "type": "object",
        "properties": {
          "rtp": {
            "type": "boolean"
          },
          "fednow": {
            "type": "boolean"
          }
        }
      },
      "GetEligibilityResponse": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/RtpAndFedNow"
        },
        "example": {
          "011000138": {
            "rtp": true,
            "fednow": true
          }
        }
      },
      "Eligible": {
        "type": "boolean",
        "description": "Describes if the routing number is RTP or Fednow eligible or not"
      },
      "RTPEligible": {
        "type": "boolean",
        "description": "Describes if the routing number is RTP eligible or not"
      },
      "FednowEligible": {
        "type": "boolean",
        "description": "Describes if the routing number is Fednow eligible or not"
      },
      "TransferGroupRequest": {
        "title": "TransferGroupRequest",
        "required": [
          "transfer_group_reference_id"
        ],
        "type": "object",
        "properties": {
          "transfer_group_reference_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferGroupReferenceID"
              }
            ],
            "x-orum-error-missing": {
              "known-error": "missing_transfer_group_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_transfer_group_reference_id"
            }
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferGroupSourceObject"
              }
            ],
            "nullable": true
          },
          "destination": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferGroupDestinationObject"
              }
            ],
            "nullable": true
          }
        }
      },
      "TransferGroup": {
        "title": "TransferGroup",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "transfer_group_reference_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          "transfer_group_reference_id": {
            "$ref": "#/components/schemas/TransferGroupReferenceID"
          },
          "source": {
            "$ref": "#/components/schemas/TransferGroupSourceObject"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferGroupDestinationObject"
          }
        }
      },
      "TransferGroupResponse": {
        "title": "TransferGroupResponse",
        "required": [
          "transfer_group"
        ],
        "type": "object",
        "properties": {
          "transfer_group": {
            "$ref": "#/components/schemas/TransferGroup"
          }
        }
      },
      "TransferGroupsResponse": {
        "title": "TransferGroupsResponse",
        "required": [
          "transfer_groups"
        ],
        "type": "object",
        "properties": {
          "transfer_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferGroup"
            }
          }
        }
      },
      "TransferGroupReferenceID": {
        "title": "TransferGroupReferenceID",
        "minLength": 1,
        "type": "string",
        "description": "Unique reference id for the transfer group",
        "x-orum-error-invalid": {
          "known-error": "invalid_transfer_group_reference_id"
        }
      },
      "TransferGroupSourceObject": {
        "title": "Source",
        "required": [
          "account_reference_id",
          "customer_reference_id"
        ],
        "type": "object",
        "properties": {
          "account_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "Unique id of the account on the Enterprise platform",
            "x-orum-error-missing": {
              "known-error": "missing_transfer_group_source_account_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_transfer_group_source_account_reference_id"
            }
          },
          "customer_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "Unique id of the customer on the Enterprise platform",
            "x-orum-error-missing": {
              "known-error": "missing_transfer_group_source_customer_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_transfer_group_source_customer_reference_id"
            }
          }
        },
        "description": "Information about the ultimate source of the transfer group."
      },
      "TransferGroupDestinationObject": {
        "title": "Destination",
        "required": [
          "account_reference_id",
          "customer_reference_id"
        ],
        "type": "object",
        "properties": {
          "account_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "Unique id of the account on the Enterprise platform",
            "x-orum-error-missing": {
              "known-error": "missing_transfer_group_destination_account_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_transfer_group_destination_account_reference_id"
            }
          },
          "customer_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "Unique id of the customer on the Enterprise platform",
            "x-orum-error-missing": {
              "known-error": "missing_transfer_group_destination_customer_reference_id"
            },
            "x-orum-error-invalid": {
              "known-error": "invalid_transfer_group_destination_customer_reference_id"
            }
          }
        },
        "description": "Information about the ultimate destination of the transfer group."
      },
      "BalanceResponse": {
        "title": "BalanceResponse",
        "required": [
          "balance"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/Balance"
          }
        }
      },
      "Balance": {
        "title": "Balance",
        "required": [
          "pending",
          "available",
          "currency",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "pending": {
            "type": "integer",
            "description": "Pending amount of the balance in integral cents (example: 100 = $1).",
            "format": "int64"
          },
          "available": {
            "type": "integer",
            "description": "Available amount of the balance in integral cents (example: 100 = $1).",
            "format": "int64"
          },
          "currency": {
            "$ref": "#/components/schemas/TransferCurrency"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "BalanceReportResponseBase": {
        "title": "BalanceReportResponseBase",
        "required": [
          "start_time",
          "end_time",
          "account_balances",
          "ledger_entry_balances"
        ],
        "type": "object",
        "properties": {
          "start_time": {
            "$ref": "#/components/schemas/StartTime"
          },
          "end_time": {
            "$ref": "#/components/schemas/EndTime"
          },
          "account_balances": {
            "$ref": "#/components/schemas/AccountBalances"
          },
          "ledger_entry_balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LedgerEntryBalance"
            }
          }
        }
      },
      "BalanceReportResponse": {
        "title": "BalanceReportResponse",
        "required": [
          "balance_statement_summary_report"
        ],
        "type": "object",
        "properties": {
          "balance_statement_summary_report": {
            "$ref": "#/components/schemas/BalanceReportResponseBase"
          }
        }
      },
      "AccountBalances": {
        "title": "AccountBalances",
        "required": [
          "opening",
          "closing"
        ],
        "type": "object",
        "properties": {
          "opening": {
            "$ref": "#/components/schemas/BalanceAmounts"
          },
          "closing": {
            "$ref": "#/components/schemas/BalanceAmounts"
          }
        },
        "description": "Open and close balances for an account."
      },
      "BalanceAmounts": {
        "required": [
          "pending_amount",
          "available_amount"
        ],
        "type": "object",
        "properties": {
          "pending_amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "available_amount": {
            "$ref": "#/components/schemas/Amount"
          }
        },
        "description": "Pending and available amounts."
      },
      "LedgerEntryBalance": {
        "required": [
          "type",
          "debit",
          "credit"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/LedgerEntryType"
          },
          "debit": {
            "$ref": "#/components/schemas/Amount"
          },
          "credit": {
            "$ref": "#/components/schemas/Amount"
          }
        },
        "description": "Ledger entries with type and debit/credit balances."
      },
      "LedgerEntryType": {
        "enum": [
          "rtp",
          "ach",
          "sdach",
          "ach_return",
          "wire",
          "wire_return",
          "outbound_funds",
          "inbound_funds",
          "balance_top_up"
        ],
        "type": "string",
        "description": "Type of ledger entry."
      },
      "StartTime": {
        "type": "string",
        "description": "The start time of the report range in ISO-8601 format.",
        "format": "date-time",
        "example": "2023-07-13T00:00:00.0000000+00:00"
      },
      "EndTime": {
        "type": "string",
        "description": "The end time of the report range in ISO-8601 format.",
        "format": "date-time",
        "example": "2023-07-13T00:00:00.0000000+00:00"
      },
      "Amount": {
        "type": "integer",
        "description": "Amount in integral cents.",
        "format": "int64",
        "example": 4295
      },
      "ControlErrorResponse": {
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "attempts_remaining": {
            "type": "integer"
          }
        }
      },
      "VerifyAccountRequest": {
        "title": "VerifyAccountRequest",
        "required": [
          "account_number",
          "routing_number",
          "account_holder_name"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountType"
              }
            ],
            "x-orum-error-invalid": {
              "message": "Type is invalid. Pass in either 'status', 'control', 'status_ownership' or 'control_ownership'.",
              "code": "invalid_type"
            },
            "x-oapi-codegen-extra-tags": {
              "csv": "type,omitempty"
            }
          },
          "account_number": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UsBankAccountNumber"
              }
            ],
            "x-orum-error-missing": {
              "message": "Account number is required. Pass an account number with 17 digits or fewer.",
              "code": "missing_account_number"
            },
            "x-orum-error-invalid": {
              "message": "Account number is invalid. Pass an account number with 17 digits or fewer.",
              "code": "invalid_account_number"
            },
            "x-oapi-codegen-extra-tags": {
              "csv": "account_number"
            }
          },
          "routing_number": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AbaRoutingNumber"
              }
            ],
            "x-orum-error-missing": {
              "message": "Routing number is required. Pass a valid 9-digit routing number.",
              "code": "missing_routing_number"
            },
            "x-orum-error-invalid": {
              "message": "Routing number is invalid. Pass a valid 9-digit routing number.",
              "code": "invalid_routing_number"
            },
            "x-oapi-codegen-extra-tags": {
              "csv": "routing_number"
            }
          },
          "account_holder_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountHolderName"
              }
            ],
            "x-orum-error-missing": {
              "message": "Account holder name is required.",
              "code": "missing_account_holder_name"
            },
            "x-orum-error-invalid": {
              "message": "Account holder name is invalid. Accepted values are letters, numbers, spaces, hyphens, apostrophes, periods and diacritics.",
              "code": "invalid_account_holder_name"
            },
            "x-oapi-codegen-extra-tags": {
              "csv": "account_holder_name"
            }
          },
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Email"
              }
            ],
            "x-orum-error-missing": {
              "message": "Email is required.",
              "code": "missing_email"
            },
            "x-orum-error-invalid": {
              "message": "Email address provided is invalid.",
              "code": "invalid_email"
            },
            "x-oapi-codegen-extra-tags": {
              "csv": "email,omitempty"
            }
          },
          "person": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OwnershipPersonRequest"
              }
            ]
          }
        }
      },
      "VerifyAccountControlRequest": {
        "title": "VerifyAccountControlRequest",
        "required": [
          "statement_code"
        ],
        "type": "object",
        "properties": {
          "statement_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementCode"
              }
            ],
            "x-orum-error-missing": {
              "message": "Statement code is required. Pass the statement code from the account statement descriptor.",
              "code": "missing_statement_code"
            },
            "x-orum-error-invalid": {
              "message": "Statement code is invalid. Pass the statement code from the account statement descriptor.",
              "code": "invalid_statement_code"
            }
          }
        }
      },
      "VerifyAccountResponseBase": {
        "title": "VerifyAccountResponseBase",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "account_number",
          "routing_number",
          "account_holder_name",
          "verification_status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrumId"
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          "account_number": {
            "$ref": "#/components/schemas/UsBankAccountNumber"
          },
          "routing_number": {
            "$ref": "#/components/schemas/AbaRoutingNumber"
          },
          "account_holder_name": {
            "$ref": "#/components/schemas/AccountHolderName"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "verification_status": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "status_reason": {
            "$ref": "#/components/schemas/StatusReason"
          },
          "ownership_status": {
            "$ref": "#/components/schemas/OwnershipStatus"
          },
          "person": {
            "$ref": "#/components/schemas/OwnershipPerson"
          },
          "control_status": {
            "$ref": "#/components/schemas/ControlStatus"
          },
          "debit_status": {
            "$ref": "#/components/schemas/DebitStatus"
          },
          "debit_status_reason": {
            "$ref": "#/components/schemas/DebitStatusReason"
          },
          "estimated_verification_date": {
            "$ref": "#/components/schemas/EstimatedVerificationDate"
          }
        }
      },
      "VerifyAccountResponse": {
        "title": "VerifyAccountResponse",
        "required": [
          "account"
        ],
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/VerifyAccountResponseBase"
          }
        }
      },
      "VerifyAccountsResponse": {
        "title": "VerifyAccountsResponse",
        "required": [
          "accounts"
        ],
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerifyAccountResponseBase"
            },
            "description": "An array of verify accounts."
          }
        }
      },
      "VerificationStatus": {
        "enum": [
          "pending",
          "valid",
          "closed",
          "invalid",
          "failed"
        ],
        "type": "string",
        "description": "Status of account verification."
      },
      "DebitStatus": {
        "enum": [
          "pending",
          "valid",
          "blocked",
          "failed"
        ],
        "type": "string",
        "description": "Status of account debit."
      },
      "OwnershipStatus": {
        "enum": [
          "pending",
          "full",
          "partial",
          "not_a_match",
          "not_found",
          "canceled",
          "failed"
        ],
        "type": "string",
        "description": "Status of account ownership."
      },
      "OwnershipPersonRequest": {
        "required": [
          "first_name",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "x-orum-error-missing": {
              "message": "First name is required.",
              "code": "missing_first_name"
            },
            "x-orum-error-invalid": {
              "message": "First name is invalid.",
              "code": "invalid_first_name"
            }
          },
          "last_name": {
            "type": "string",
            "x-orum-error-missing": {
              "message": "Last name is required.",
              "code": "missing_last_name"
            },
            "x-orum-error-invalid": {
              "message": "Last Name is invalid.",
              "code": "invalid_last_name"
            }
          }
        },
        "description": "Ownership details for a person"
      },
      "OwnershipPerson": {
        "required": [
          "first_name",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "first_name_match": {
            "$ref": "#/components/schemas/OwnershipResult"
          },
          "last_name_match": {
            "$ref": "#/components/schemas/OwnershipResult"
          }
        },
        "description": "Ownership details for a person"
      },
      "OwnershipResult": {
        "enum": [
          "match",
          "not_a_match",
          "not_found"
        ],
        "type": "string",
        "description": "Result of Ownership match"
      },
      "ControlStatus": {
        "enum": [
          "pending",
          "valid",
          "canceled"
        ],
        "type": "string",
        "description": "Status of account control."
      },
      "StatusReason": {
        "enum": [
          "blocked_account",
          "closed_account",
          "deceased_party",
          "duplicated_transfer",
          "invalid_account",
          "invalid_field",
          "invalid_routing",
          "regulatory_error",
          "unavailable_financial_institution",
          "unexpected_error",
          "unsupported_transfer"
        ],
        "type": "string",
        "description": "Status reason for failed, invalid, and closed accounts."
      },
      "DebitStatusReason": {
        "enum": [
          "blocked_account",
          "closed_account",
          "deceased_party",
          "duplicated_transfer",
          "invalid_account",
          "invalid_field",
          "invalid_routing",
          "regulatory_error",
          "unavailable_financial_institution",
          "unexpected_error",
          "unsupported_transfer",
          "debit_blocked",
          "unauthorized_transfer"
        ],
        "type": "string",
        "description": "Status reason for failed and blocked accounts."
      },
      "EstimatedVerificationDate": {
        "type": "string",
        "description": "Estimated date that the account verification will be complete. Time will always be midnight and should be ignored.",
        "format": "date-time",
        "example": "2023-07-13T00:00:00.0000000+00:00"
      },
      "StatementCode": {
        "title": "StatementCode",
        "pattern": "^[a-zA-Z0-9]{4}$",
        "type": "string",
        "description": "Text from the account statement descriptor to verify account control."
      },
      "Email": {
        "type": "string",
        "description": "Email address to notify once the statement code is sent to the account to verify account control.",
        "format": "email"
      },
      "WebhookEventType": {
        "enum": [
          "subscribe_all",
          "person_created",
          "person_verified",
          "person_rejected",
          "person_restricted",
          "person_unverified",
          "person_closed",
          "person_all",
          "business_created",
          "business_verified",
          "business_rejected",
          "business_restricted",
          "business_unverified",
          "business_closed",
          "business_all",
          "external_account_created",
          "external_account_verified",
          "external_account_rejected",
          "external_account_restricted",
          "external_account_unverified",
          "external_account_closed",
          "external_account_all",
          "transfer_updated",
          "transfer_all",
          "verify_account_updated"
        ],
        "type": "string"
      },
      "InitializeKeypairResponse": {
        "required": [
          "enterprise_keypair"
        ],
        "type": "object",
        "properties": {
          "enterprise_keypair": {
            "$ref": "#/components/schemas/EnterpriseKeypair"
          }
        }
      },
      "EnterpriseKeypair": {
        "required": [
          "id",
          "enterprise_name",
          "public_key",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "enterprise_name": {
            "type": "string"
          },
          "public_key": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "CreateWebhookConfiguration": {
        "required": [
          "event_types",
          "enabled",
          "url"
        ],
        "type": "object",
        "properties": {
          "event_types": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            }
          },
          "enabled": {
            "enum": [
              "true",
              "false"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "CreateWebhookConfigurationResponse": {
        "required": [
          "webhook_configuration"
        ],
        "type": "object",
        "properties": {
          "webhook_configuration": {
            "$ref": "#/components/schemas/WebhookConfigurationSummary"
          }
        }
      },
      "InvokeWebhookConfiguration": {
        "required": [
          "event_type",
          "data"
        ],
        "type": "object",
        "properties": {
          "event_type": {
            "$ref": "#/components/schemas/WebhookEventType"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "ListWebhookConfigurationsResponse": {
        "type": "object",
        "properties": {
          "webhook_configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookConfigurationSummary"
            }
          }
        }
      },
      "WebhookConfigurationSummary": {
        "required": [
          "event_types",
          "enabled",
          "url",
          "id",
          "enterprise_name",
          "data_version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "enterprise_name": {
            "type": "string"
          },
          "data_version": {
            "type": "string"
          },
          "event_types": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            }
          },
          "enabled": {
            "enum": [
              "true",
              "false"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api-sandbox.orum.io/oauth/token",
            "scopes": {
              "read:reports": "Read reports"
            }
          }
        }
      },
      "bearerAuth": {
        "type": "http",
        "description": "The auth token received from Authentication endpoints.",
        "scheme": "bearer"
      }
    }
  }
}